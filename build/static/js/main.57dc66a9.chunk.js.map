{"version":3,"sources":["serviceWorker.js","CommandLineReducer.js","UserDetailsReducer.js","AppReducer.js","reducers.js","parseGit.js","GitActions.js","CommandLine.js","UserDetails.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","command","name","email","githubPassword","remoteBranch","remoteRepoURL","files","gitResponseMesssages","gitCurrentBranch","gitLog","messageCount","globals","homeDirectory","corsProxy","githubUrl","repoUrl","rootReducer","combineReducers","commandLine","store","arguments","length","undefined","action","type","payload","userDetails","Object","objectSpread","appState","message","id","text","concat","toConsumableArray","messagePayload","map","messageObject","parseCommit","params","buildMessage","messageStart","messageEnd","error","forEach","param","translateStatus","arrayOfIsoGitStatuses","isoGitStatus","simpleStatus","getState","gitStatuses","modified","file","fileStatus","modificationStatus","indexOf","buildStatusString","hashOfModifiedGitFiles","unstagedModifiedFiles","unstagedAddedFiles","unstagedDeletedFiles","stagedModifiedFiles","stagedAddedFiles","stagedDeletedFiles","ignored","push","fileName","gitStatusResponseString","addUnstagedUnTrackedFileMessage","f","addUnstagedModifiedAndDeletedFileMessage","addChangesToBeCommittedMessage","string","constructGitLogMessage","gitLogObj","commit","author","Date","timestamp","filterBranchCommand","branchName","branchCommand","filterCheckoutCommand","checkIfCommitParamsAreValid","valid","validResponseObj","indexOfM","slice","filter","gitLogAction","directory","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","gitLogResponse","appLogData","gitLogMessages","updateGitMessageLogAction","wrap","_context2","prev","next","git","log","dir","depth","sent","logObject","oid","t0","console","stop","_x2","apply","this","gitCloneAction","ref","singleBranch","_ref3","_callee3","newfileDirectory","currentBranch","updateCurrentDirectoryAction","_context3","clone","url","pfs","readdir","_x3","touchFileAction","_ref4","_callee4","catchTouchErrors","data","_context4","writeFile","path","join","_x4","getFileGitStatus","_ref5","_callee5","_context5","status","filepath","abrupt","_x5","_x6","getAllFileStatuses","_ref6","_callee7","_context7","Promise","all","_ref7","_callee6","_context6","t1","_x9","_x7","_x8","gitStatusAction","_ref8","_callee8","fileStatuses","_context8","parseGit","_x10","gitAddFile","_ref9","_callee9","_context9","add","_x11","_x12","gitAddAllFiles","_ref10","_callee11","_context11","_ref11","_callee10","_context10","_x15","_x13","_x14","gitAddFilesAction","_ref12","_callee12","_context12","_x16","gitCommitAllFiles","_ref13","_callee14","user","commitMessage","_context14","_ref14","_callee13","_context13","_x21","_x17","_x18","_x19","_x20","gitCommitFilesAction","_ref15","_callee15","currentFileStatus","filesToBeCommitted","numFilesChanges","responseString","_context15","fileObj","mode","_x22","gitCheckoutAction","_ref16","_callee16","_updateGitMessageLogAction","_context16","checkout","_x23","gitBranchListAction","branch","_ref17","_callee17","branchesWithNewLine","_context17","listBranches","_x24","gitBranchCreate","_ref18","_callee18","createAction","_context18","_x25","gitBranchDelete","_ref19","_callee19","deleteAction","_context19","deleteBranch","_x26","gitPushAction","remote","_ref20","_callee20","pushResponse","pushAction","_context20","username","password","_x27","CommandLine","handleSubmit","e","preventDefault","_this","props","execute","handleChange","target","value","react_default","createElement","className","onSubmit","placeholder","onChange","Component","connect","UserDetails","handleUpdate","handleClonePlayRepo","gitActions","handleClonePersonalRepo","onClick","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","executeCommand","commandArray","trim","split","gitParser","default","touchParser","git init","_gitInit","_callee","_context","sendUnsupportedMessage","git status","_gitStatus","_x","git log","_gitLog","git branch","_gitBranch","_parseGit$filterBranc","git commit","_gitCommit","validity","git add","_gitAdd","i","git checkout","_gitCheckout","checkoutCommand","git push","_gitPush","_ref","bind","assertThisInitialized","FS","wipe","plugins","set","pify","mkdir","_this2","item","key","src_UserDetails","handleDetailsChange","src_CommandLine","navigator","serviceWorker","ready","then","registration","unregister","middleware","composeWithDevTools","applyMiddleware","thunkMiddleware","createStore","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.57dc66a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  command: \"git init\"\n};\n\nexport default function CommandLineReducer(store = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case \"UPDATE_COMMAND\": {\n      return {\n        command: payload\n      };\n    }\n\n    case \"CLEAR_COMMAND_LINE\": {\n      return {\n        command: \"\"\n      };\n    }\n    default: {\n      return store;\n    }\n  }\n}\n","const initialState = {\n  name: \"mark\",\n  email: \"mark@gmail.com\",\n  githubPassword: 'DUMMY_WORD',\n  remoteBranch: '',\n  remoteRepoURL: 'github.com/remote/repo'\n};\n\nexport default function UserDetailsReducer(store = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case \"UPDATE_NAME\": {\n      return {\n        ...store,\n        name: payload\n      };\n    }\n\n    case \"UPDATE_EMAIL\": {\n      return {\n        ...store,\n        email: payload\n      };\n    }\n\n    case \"UPDATE_PASSWORD\": {\n      return {\n        ...store,\n        githubPassword: payload\n      };\n    }\n\n    case \"UPDATE_REMOTE_REPO_URL\": {\n      return {\n        ...store,\n        remoteRepoURL: payload\n      };\n    }\n\n    case \"UPDATE_REMOTE_BRANCH\": {\n      return {\n        ...store,\n        remoteBranch: payload\n      };\n    }\n\n    default: {\n      return store;\n    }\n  }\n}\n","const initialState = {\n  files: [],\n  gitResponseMesssages: [],\n  gitCurrentBranch: \"\",\n  gitLog: [],\n  messageCount: 0,\n  globals: {\n    homeDirectory: \"/dev\",\n    corsProxy: \"https://cors.isomorphic-git.org\",\n    githubUrl: \"https://github.com/StopItGitSomeHelp/githelpstarter.git\",\n    repoUrl: 'https://github.com/StopItGitSomeHelp/githelpstarter'\n  }\n};\n\nexport default function AppReducer(store = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case \"UPDATE_FILE_DIRECTORY\": {\n      return {\n        ...store,\n        files: payload\n      };\n    }\n\n    case \"UPDATE_GIT_LOG\": {\n      debugger\n      return {\n        ...store,\n        gitLog: payload\n      };\n    }\n\n    case \"GET_CURRENT_DIRECTORY\": {\n      return {\n        ...store,\n        gitCurrentBranch: payload\n      };\n    }\n\n    case \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\": {\n      const message = {\n        id: store.messageCount,\n        text: payload\n      };\n      return {\n        ...store,\n        gitResponseMesssages: [message, ...store.gitResponseMesssages],\n        store: store.messageCount++\n      };\n    }\n\n    case \"UPDATE_WITH_MULTIPLE_GIT_RESPONSE_MESSAGE_LOG\": {\n      const messagePayload = payload.map(message => {\n        const messageObject = {\n          id: store.messageCount,\n          text: message\n        };\n        store.messageCount++; //TODO: not great because this introduces a side-effect. Try to think of better way.\n        return messageObject;\n      });\n      return {\n        ...store,\n        gitResponseMesssages: [...messagePayload, ...store.gitResponseMesssages]\n      };\n    }\n    default: {\n      return store;\n    }\n  }\n}\n","import { combineReducers } from 'redux';\nimport CommandLineReducer from './CommandLineReducer'\nimport UserDetailsReducer from './UserDetailsReducer'\nimport AppReducer from './AppReducer'\n\nconst rootReducer =  combineReducers({\n    commandLine: CommandLineReducer,\n    userDetails: UserDetailsReducer,\n    appState: AppReducer\n});\n\nexport default rootReducer;","import store from \"./index\";\n\nexport const parseCommit = params => {\n  let message = \"\";\n  let buildMessage = false;\n  let messageStart = false;\n  let messageEnd = false;\n  let error = false;\n  params.forEach(param => {\n    if (!buildMessage && param === \"-m\" && !messageEnd) {\n      buildMessage = true;\n    }\n    if (buildMessage) {\n      if (messageStart) {\n        message += param;\n        if (\n          param[param.length - 1] === messageStart ||\n          param[param.length - 1] === messageStart\n        ) {\n          //in end of message\n          buildMessage = false;\n          messageEnd = true;\n        } else {\n          message += \" \";\n        }\n      } else {\n        if (param[0] === '\"' || param[0] === \"'\") {\n          //message started\n          messageStart = param[0];\n          message += param;\n          if (\n            param[param.length - 1] === messageStart ||\n            param[param.length - 1] === messageStart\n          ) {\n            buildMessage = false;\n            messageEnd = true;\n          } else {\n            message += \" \";\n          }\n        }\n      }\n    }\n  });\n  if (!messageEnd) {\n    error = true;\n  }\n  return error ? \"error\" : message;\n};\n\nexport const translateStatus = (\n  arrayOfIsoGitStatuses,\n  simpleStatus = false\n) => {\n  const { appState } = store.getState();\n  const ignore = [\"ignored\", \"unmodified\"];\n  const gitStatuses = [\n    \"*modified\",\n    \"*deleted\",\n    \"*added\",\n    \"absent\",\n    \"modified\",\n    \"deleted\",\n    \"added\",\n    \"*unmodified\",\n    \"*absent\"\n  ];\n  let isoGitStatus;\n  let modified = false;\n  const gitFileStatuses = arrayOfIsoGitStatuses.map(file => file.fileStatus);\n  gitFileStatuses.forEach(modificationStatus => {\n    if (gitStatuses.indexOf(modificationStatus) > -1) {\n      modified = true;\n    }\n  });\n  if (!modified) {\n    isoGitStatus = \"unmodified\";\n  } else {\n    isoGitStatus = \"modified\";\n  }\n  if (simpleStatus) {\n    return isoGitStatus;\n  } else {\n    return buildStatusString(isoGitStatus, arrayOfIsoGitStatuses, appState);\n  }\n};\n\nconst buildStatusString = (isoGitStatus, arrayOfIsoGitStatuses, appState) => {\n  switch (isoGitStatus) {\n    case \"unmodified\": {\n      return `On branch ${appState.gitCurrentBranch}\\n\n      Your branch is up to date with 'origin/${appState.gitCurrentBranch}'.\\n\n      nothing to commit, working tree clean\\n`;\n    }\n    case \"modified\": {\n      const hashOfModifiedGitFiles = {\n        unstagedModifiedFiles: [],\n        unstagedAddedFiles: [],\n        unstagedDeletedFiles: [],\n        stagedModifiedFiles: [],\n        stagedAddedFiles: [],\n        stagedDeletedFiles: [],\n        ignored: []\n      };\n      arrayOfIsoGitStatuses.forEach(file => {\n        switch (file.fileStatus) {\n          case \"*modified\": {\n            hashOfModifiedGitFiles.unstagedModifiedFiles.push(file.fileName);\n            break;\n          }\n          case \"*deleted\": {\n            hashOfModifiedGitFiles.unstagedDeletedFiles.push(file.fileName);\n            break;\n          }\n          case \"*added\": {\n            hashOfModifiedGitFiles.unstagedAddedFiles.push(file.fileName);\n            break;\n          }\n          case \"modified\": {\n            hashOfModifiedGitFiles.stagedModifiedFiles.push(file.fileName);\n            break;\n          }\n          case \"deleted\": {\n            hashOfModifiedGitFiles.stagedDeletedFiles.push(file.fileName);\n            break;\n          }\n          case \"added\": {\n            hashOfModifiedGitFiles.stagedAddedFiles.push(file.fileName);\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n      });\n      let gitStatusResponseString = `On branch ${appState.gitCurrentBranch}\\n`;\n      if (hashOfModifiedGitFiles.unstagedAddedFiles.length > 0) {\n        gitStatusResponseString += addUnstagedUnTrackedFileMessage(\n          gitStatusResponseString\n        );\n        hashOfModifiedGitFiles.unstagedAddedFiles.forEach(f => {\n          gitStatusResponseString += `${f}\\n`;\n        });\n      }\n      if (hashOfModifiedGitFiles.unstagedModifiedFiles.length > 0) {\n        gitStatusResponseString += addUnstagedModifiedAndDeletedFileMessage(\n          gitStatusResponseString\n        );\n        hashOfModifiedGitFiles.unstagedModifiedFiles.forEach(file => {\n          gitStatusResponseString += `modified:    ${file}\\n`;\n        });\n      }\n      if (hashOfModifiedGitFiles.unstagedDeletedFiles.length > 0) {\n        gitStatusResponseString += addUnstagedModifiedAndDeletedFileMessage(\n          gitStatusResponseString\n        );\n        hashOfModifiedGitFiles.unstagedDeletedFiles.forEach(file => {\n          gitStatusResponseString += `deleted:    ${file}\\n`;\n        });\n      }\n      if (hashOfModifiedGitFiles.stagedModifiedFiles.length > 0) {\n        gitStatusResponseString += addChangesToBeCommittedMessage(\n          gitStatusResponseString\n        );\n        hashOfModifiedGitFiles.stagedModifiedFiles.forEach(file => {\n          gitStatusResponseString += `modified:    ${file}\\n`;\n        });\n      }\n      if (hashOfModifiedGitFiles.stagedDeletedFiles.length > 0) {\n        gitStatusResponseString += addChangesToBeCommittedMessage(\n          gitStatusResponseString\n        );\n        hashOfModifiedGitFiles.stagedDeletedFiles.forEach(file => {\n          gitStatusResponseString += `deleted:    ${file}\\n`;\n        });\n      }\n      if (hashOfModifiedGitFiles.stagedAddedFiles.length > 0) {\n        gitStatusResponseString += addChangesToBeCommittedMessage(\n          gitStatusResponseString\n        );\n        hashOfModifiedGitFiles.stagedAddedFiles.forEach(file => {\n          gitStatusResponseString += `new file:    ${file}\\n`;\n        });\n      }\n      return gitStatusResponseString;\n    }\n    default:\n      return \"We dont understand this git command\";\n  }\n};\n\nconst addUnstagedModifiedAndDeletedFileMessage = string => {\n  return string.indexOf(\"Changes not staged for commit:\") === -1\n    ? `\n  Changes not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\\n\n  `\n    : \"\";\n};\n\nconst addUnstagedUnTrackedFileMessage = string => {\n  return string.indexOf(\"Untracked files:\") === -1\n    ? `\n    Untracked files:\n    (use \"git add <file>...\" to include in what will be committed)\\n\n    `\n    : \"\";\n};\n\nconst addChangesToBeCommittedMessage = string => {\n  return string.indexOf(\"Changes to be committed:\") === -1\n    ? `\n    Changes to be committed:\n    (use \"git reset HEAD <file>...\" to unstage)\\n\n    `\n    : \"\";\n};\n\nexport const getLogMessages = gitLogDataArray => {\n  let messageArray = gitLogDataArray.map(gitLogObj =>\n    constructGitLogMessage(gitLogObj)\n  );\n  return messageArray;\n};\n\nexport const constructGitLogMessage = gitLogObj => {\n  const message = `commit ${gitLogObj.commit}\\n\n                   Author: ${gitLogObj.author.name} <${\n    gitLogObj.author.email\n  }>\\n\n                   Date: ${new Date(gitLogObj.author.timestamp * 1000)}\\n\n                   message: ${gitLogObj.message}`;\n\n  return message;\n};\n\nexport const filterBranchCommand = params => {\n  let branchName = \"\";\n  let branchCommand = \"\";\n  params.forEach(param => {\n    if (param === \"--list\" && !branchCommand) {\n      branchCommand = \"list\";\n    } else if ((!branchCommand && param[0] !== \"-\") || params[0] === \"-b\") {\n      branchCommand = \"create\";\n      branchName = param;\n    } else if ((param === \"-d\" || param === \"-D\") && !branchCommand) {\n      branchCommand = \"delete\";\n    } else if (branchCommand === \"delete\" && param[0] !== \"-\") {\n      branchName = param;\n    } else {\n      branchCommand = \"error\";\n    }\n  });\n  if (!branchCommand) {\n    branchCommand = \"list\";\n  }\n  return {\n    branchName: branchName,\n    branchCommand: branchCommand\n  };\n};\n\nexport const filterCheckoutCommand = params => {\n  let branchName = \"\";\n  let command = \"checkout\";\n  if (params.length === 1) {\n    branchName = params[0];\n  } else if (params.length === 2 && params[0] === \"-b\") {\n    branchName = params[1];\n    command = \"create\";\n  } else {\n    command = \"error\";\n    branchName = params[1];\n  }\n\n  return {\n    branchName: branchName,\n    command: command\n  };\n};\n\nexport const filterCommitted = status => {\n  return status === \"added\" || status === \"modified\" || status === \"deleted\";\n};\n\nexport const checkIfCommitParamsAreValid = (params, files) => {\n  let valid = true;\n  const validResponseObj = {};\n  const indexOfM = params.indexOf(\"-m\");\n  if (indexOfM === -1) {\n    valid = false;\n    validResponseObj.message = \"missing -m\";\n  } else if (indexOfM === params.length - 1) {\n    valid = false;\n    validResponseObj.message = \"no commit message\";\n  } else {\n    const filesParam = params.slice(0, indexOfM);\n    let badFiles = filesParam.filter(file => files.indexOf(file) === -1);\n    if (badFiles.length > 0) {\n      valid = false;\n      validResponseObj.message = \"files not found\";\n      return validResponseObj;\n    }\n    const message = parseCommit(params);\n    validResponseObj.message = message;\n  }\n\n  validResponseObj.valid = valid;\n  return validResponseObj;\n};\n","import * as parseGit from \"./parseGit\";\nimport path from \"path-browserify\";\n\nexport const gitInitAction = directory => async dispatch => {\n  try {\n    console.log(await window.pfs.readdir(directory))\n    await window.git.init({ dir: path.resolve(directory) });\n    const newDirectory = await window.pfs.readdir(directory);\n    console.log(newDirectory)\n    const NewFilesAction = {\n      type: 'UPDATE_FILE_DIRECTORY',\n      payload: newDirectory\n    }\n    dispatch(NewFilesAction)\n    const updateGitLogAction = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: `Initialized empty Git repository in /Users${directory}/.git`\n    };\n    dispatch(updateGitLogAction);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const gitLogAction = directory => async dispatch => {\n  try {\n    const gitLogResponse = await window.git.log({ dir: directory, depth: 1 });\n    const appLogData = gitLogResponse.map(logObject => {\n      return {\n        commit: logObject.oid,\n        message: logObject.message,\n        author: logObject.author\n      };\n    });\n    const gitLogMessages = parseGit.getLogMessages(appLogData);\n    const updateGitLogAction = {\n      type: \"UPDATE_GIT_LOG\",\n      payload: appLogData\n    };\n    const updateGitMessageLogAction = {\n      type: \"UPDATE_WITH_MULTIPLE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: gitLogMessages\n    };\n    // const sub = await gitLogAction.json();\n    dispatch(updateGitLogAction);\n    dispatch(updateGitMessageLogAction);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const gitCloneAction = (\n  directory,\n  corsProxy,\n  githubUrl,\n  ref,\n  singleBranch\n) => async dispatch => {\n  try {\n    await window.git.clone({\n      dir: directory,\n      corsProxy: corsProxy,\n      url: githubUrl,\n      ref: ref,\n      singleBranch: singleBranch,\n      depth: 3\n    });\n    const newfileDirectory = await window.pfs.readdir(directory);\n    const currentBranch = await window.git.currentBranch({\n      dir: directory\n    });\n    const fileDirectoryAction = {\n      type: \"UPDATE_FILE_DIRECTORY\",\n      payload: newfileDirectory\n    };\n    const updateCurrentDirectoryAction = {\n      type: \"GET_CURRENT_DIRECTORY\",\n      payload: currentBranch\n    };\n    dispatch(fileDirectoryAction);\n    dispatch(updateCurrentDirectoryAction);\n\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const touchFileAction = (directory, fileName) => async dispatch => {\n  const catchTouchErrors = error => {\n    return {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: `sorry, there was an error while writing your file.`\n    };\n  };\n  try {\n    await window.pfs.writeFile(\n      path.join(directory, fileName),\n      \"dummy text\",\n      \"utf8\"\n    );\n    const data = await window.pfs.readdir(directory);\n    if (data.indexOf(fileName) !== -1) {\n      const updateGitMessageLogAction = {\n        type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n        payload: `File ${fileName} has been created.`\n      };\n      dispatch(updateGitMessageLogAction);\n      const action = {\n        type: \"UPDATE_FILE_DIRECTORY\",\n        payload: data\n      };\n      dispatch(action);\n    }\n  } catch (error) {\n    dispatch(catchTouchErrors(error));\n  }\n};\n\nexport const getFileGitStatus = async (directory, file) => {\n  return await window.git.status({\n    dir: directory,\n    filepath: file\n  });\n};\n\nexport const getAllFileStatuses = async (directory, files) => {\n  return await Promise.all(\n    files.map(async file => {\n      return {\n        fileName: file,\n        fileStatus: await getFileGitStatus(directory, file)\n      };\n    })\n  );\n};\n\nexport const gitStatusAction = (directory, files) => async dispatch => {\n  try {\n    if (files.length === 0) {\n      const action = {\n        type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n        payload:\n          \"fatal: Not a git repository (or any of the parent directories): .git\"\n      };\n      dispatch(action);\n      return;\n    }\n    const fileStatuses = await getAllFileStatuses(directory, files);\n    const message = parseGit.translateStatus(fileStatuses);\n    const action = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: message\n    };\n    dispatch(action);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst gitAddFile = async (directory, file) => {\n  return await window.git.add({\n    dir: directory,\n    filepath: file\n  });\n};\n\nconst gitAddAllFiles = async (directory, files) => {\n  return await Promise.all(\n    files.map(async file => {\n      return {\n        fileName: file,\n        fileStatus: await gitAddFile(directory, file)\n      };\n    })\n  );\n};\n\nexport const gitAddFilesAction = (directory, files) => async dispatch => {\n  try {\n    await gitAddAllFiles(directory, files);\n    const fileStatuses = await getAllFileStatuses(directory, files);\n    const message = parseGit.translateStatus(fileStatuses);\n    const action = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: message\n    };\n    dispatch(action);\n  } catch (err) {\n    console.log(err)\n  }\n};\n\n// apparently this is kind of thing is unsupported...\n// const gitCommitFile = async (directory, file, user, commitMessage) => {\n//   return await window.git.commit({\n//     dir: file,\n//     author: user,\n//     message: commitMessage\n//   });\n// };\n\nconst gitCommitAllFiles = async (directory, files, user, commitMessage) => {\n  return await Promise.all(\n    files.map(async file => {\n      return {\n        fileName: file,\n        fileStatus: await window.git.commit({\n          dir: directory,\n          author: user,\n          message: commitMessage\n        })\n      };\n    })\n  );\n};\n\nexport const gitCommitFilesAction = (\n  directory,\n  files,\n  user,\n  commitMessage\n) => async dispatch => {\n  try {\n    //determine which files will be commmitted\n    const currentFileStatus = await getAllFileStatuses(directory, files);\n    const filesToBeCommitted = currentFileStatus.filter(fileObj =>\n      parseGit.filterCommitted(fileObj.fileStatus)\n    );\n    const numFilesChanges = filesToBeCommitted.length;\n    let responseString = \"\";\n    filesToBeCommitted.forEach(fileObj => {\n      const mode =\n        fileObj.fileStatus === \"added\" ? \"created\" : fileObj.fileStatus;\n      responseString += `${mode}:    ${fileObj.fileName}\n      `;\n    });\n    responseString = `${numFilesChanges} ${\n      numFilesChanges > 1 ? \"files\" : \"file\"\n    } changed\n    ${responseString}`;\n\n    await gitCommitAllFiles(directory, filesToBeCommitted, user, commitMessage);\n    //if want to error handle =>\n    // const fileStatuses = await getAllFileStatuses(directory, files);\n    // const message = parseGit.translateStatus(fileStatuses, true);\n    // console.log(\"message\", message);\n    const action = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: responseString\n    };\n    dispatch(action);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const gitCheckoutAction = (directory, branchName) => async dispatch => {\n  try {\n    await window.git.checkout({\n      dir: directory,\n      ref: branchName\n    });\n    const currentBranch = await window.git.currentBranch({\n      dir: directory\n    });\n    const updateCurrentDirectoryAction = {\n      type: \"GET_CURRENT_DIRECTORY\",\n      payload: currentBranch\n    };\n    dispatch(updateCurrentDirectoryAction);\n    const updateGitMessageLogAction = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: `Switched to branch '${currentBranch}'`\n    };\n    dispatch(updateGitMessageLogAction);\n  } catch (err) {\n    console.log(err);\n    const updateGitMessageLogAction = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: `error: pathspec ${branchName} did not match any file(s) known to git.`\n    };\n    dispatch(updateGitMessageLogAction);\n  }\n};\n\nexport const gitBranchListAction = (directory, branch) => async dispatch => {\n  try {\n    const data = await window.git.listBranches({\n      dir: directory\n    });\n    const currentBranch = await window.git.currentBranch({\n      dir: directory\n    });\n    data[data.indexOf(currentBranch)] = `*${currentBranch}`;\n    const branchesWithNewLine = data.map(branch => `${branch}\\n`);\n    const message = branchesWithNewLine;\n    const updateGitMessageLogList = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: message\n    };\n    dispatch(updateGitMessageLogList);\n  } catch (err) {}\n};\n\nexport const gitBranchCreate = (directory, branch) => async dispatch => {\n  try {\n    await window.git.branch({ dir: directory, ref: branch });\n    const createAction = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: `branch ${branch} has been created. Type git branch to see all branches.`\n    };\n    dispatch(createAction);\n  } catch (err) {}\n};\n\nexport const gitBranchDelete = (directory, branch) => async dispatch => {\n  try {\n    await window.git.deleteBranch({\n      dir: directory,\n      ref: branch\n    });\n    const deleteAction = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: `branch ${branch} has been deleted. Type git branch to see all branches.`\n    };\n    dispatch(deleteAction);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const gitPushAction = (\n  directory,\n  user,\n  branch,\n  corsProxy,\n  remote\n) => async dispatch => {\n  console.log(directory, corsProxy, remote);\n  try {\n    const pushResponse = await window.git.push({\n      dir: directory,\n      remote: \"origin\",\n      ref: branch,\n      corsProxy: corsProxy,\n      username: user.email,\n      password: user.githubPassword\n    });\n    console.log(pushResponse);\n    const pushAction = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: `successful push to origin/${branch} @ ${remote}`\n    };\n    dispatch(pushAction);\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass CommandLine extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.execute(this.props.store.command);\n    this.props.dispatch({\n      type: 'CLEAR_COMMAND_LINE',\n    })\n  };\n  \n  handleChange = e => {\n    const { dispatch } = this.props;\n    const action = {\n      type: \"UPDATE_COMMAND\",\n      payload: e.target.value\n    };\n    dispatch(action);\n  };\n\n  render() {\n    return (\n      <form className=\"level\" onSubmit={this.handleSubmit}>\n        <input\n          className=\"level-left input git-command-input\"\n          placeholder=\"Try a git command (git status)...\"\n          type=\"text\"\n          value={this.props.store.command}\n          onChange={this.handleChange}\n        />\n        <button className=\"level-right button is-success\" type=\"submit\">\n          Run\n        </button>\n      </form>\n    );\n  }\n}\n\nfunction mapStateToProps(store) {\n  return {\n    store: store.commandLine\n  };\n}\n\nexport default connect(mapStateToProps)(CommandLine);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as gitActions from \"./GitActions\";\n\nclass UserDetails extends Component {\n  handleUpdate = e => {\n    const { dispatch } = this.props;\n    const action = {\n      type: `UPDATE_${e.target.id}`,\n      payload: e.target.value\n    };\n    dispatch(action);\n  };\n\n  handleClonePlayRepo = () => {\n    gitActions.gitCloneAction(\n      this.props.globals.homeDirectory,\n      this.props.globals.corsProxy,\n      this.props.globals.githubUrl,\n      \"develop\"\n    )(this.props.dispatch);\n  };\n\n  handleClonePersonalRepo = () => {\n    gitActions.gitCloneAction(\n      this.props.globals.homeDirectory,\n      this.props.globals.corsProxy,\n      this.props.userDetails.remoteRepoURL,\n      this.props.userDetails.remoteBranch\n    )(this.props.dispatch);\n  };\n\n  render() {\n    return (\n      <div className=\"container user-details-container\">\n        <p>\n          Click this button to clone the develop branch of a provided dummy repo\n        </p>\n        <p>Github link: {this.props.globals.repoUrl}</p>\n        <button\n          className=\"level button is-link is-outlined\"\n          onClick={this.handleClonePlayRepo}\n          type=\"submit\"\n        >\n          Clone play repo\n        </button>\n        <p>\n          Or fill out the auth details of your own repo to clone from and push\n          to\n        </p>\n        <input\n          className=\"input level user-detail\"\n          id=\"NAME\"\n          value={this.props.userDetails.name}\n          onChange={this.handleUpdate}\n          placeholder=\"name\"\n        />\n        <input\n          className=\"input level user-detail\"\n          id=\"EMAIL\"\n          value={this.props.userDetails.email}\n          onChange={this.handleUpdate}\n          placeholder=\"email\"\n        />\n        <input\n          className=\"input level user-detail\"\n          id=\"PASSWORD\"\n          type=\"password\"\n          value={this.props.userDetails.githubPassword}\n          onChange={this.handleUpdate}\n          placeholder=\"github password (for git push)\"\n        />\n        <input\n          className=\"input level user-detail\"\n          id=\"REMOTE_REPO_URL\"\n          value={this.props.userDetails.remoteRepoURL}\n          onChange={this.handleUpdate}\n          placeholder=\"github repo .git link \"\n        />\n        <input\n          className=\"input level user-detail\"\n          id=\"REMOTE_BRANCH\"\n          value={this.props.userDetails.remoteBranch}\n          onChange={this.handleUpdate}\n          placeholder=\"github repo branch\"\n        />\n        <button\n          className=\"level button is-link is-outlined\"\n          onClick={this.handleClonePlayRepo}\n          type=\"submit\"\n        >\n          Clone personal repo\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(store) {\n  return {\n    userDetails: store.userDetails,\n    globals: store.appState.globals\n  };\n}\n\nexport default connect(mapStateToProps)(UserDetails);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.scss\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nimport * as git from \"isomorphic-git\";\nimport pify from \"pify\";\nimport * as parseGit from \"./parseGit\";\nimport * as gitActions from \"./GitActions\";\n\nimport CommandLine from \"./CommandLine\";\nimport UserDetails from \"./UserDetails\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const { dispatch } = this.props;\n    dispatch.bind(this);\n    //wipe old file system and initialize new one\n    window.FS = new FS(\"userFS\", { wipe: true });\n    window.git = git;\n    window.git.plugins.set(\"fs\", window.FS);\n    console.log(git)\n    console.log(window.FS)\n    window.pfs = pify(window.FS);\n\n\n    window.pfs.mkdir(this.props.appState.globals.homeDirectory);\n    window.pfs.readdir(this.props.appState.globals.homeDirectory)\n\n  }\n\n  executeCommand = command => {\n    const commandArray = command.trim().split(\" \");\n    if (commandArray[0] === \"git\") {\n      if (this.gitParser[`${commandArray[0]} ${commandArray[1]}`]) {\n        this.gitParser[`${commandArray[0]} ${commandArray[1]}`](\n          commandArray.slice(2)\n        );\n      } else {\n        this.gitParser.default();\n      }\n    } else if (commandArray[0] === \"touch\") {\n      this.touchParser(commandArray.slice(1));\n    } else {\n      this.gitParser.default();\n    }\n  };\n\n  gitParser = {\n    \"git init\": async () => {\n      // TODO: get init working\n      // gitActions.gitInitAction(this.props.appState.globals.homeDirectory)(\n      //   this.props.dispatch\n      // );\n      this.sendUnsupportedMessage();\n    },\n    \"git status\": async fileName => {\n      gitActions.gitStatusAction(\n        this.props.appState.globals.homeDirectory,\n        this.props.appState.files\n      )(this.props.dispatch);\n    },\n    \"git log\": async () => {\n      gitActions.gitLogAction(this.props.appState.globals.homeDirectory)(\n        this.props.dispatch\n      );\n    },\n    \"git branch\": async params => {\n      const { branchName, branchCommand } = parseGit.filterBranchCommand(\n        params\n      );\n      switch (branchCommand) {\n        case \"list\":\n          gitActions.gitBranchListAction(\n            this.props.appState.globals.homeDirectory,\n            branchName\n          )(this.props.dispatch);\n          break;\n        case \"create\":\n          gitActions.gitBranchCreate(\n            this.props.appState.globals.homeDirectory,\n            branchName\n          )(this.props.dispatch);\n          break;\n        case \"delete\":\n          gitActions.gitBranchDelete(\n            this.props.appState.globals.homeDirectory,\n            branchName\n          )(this.props.dispatch);\n          break;\n        default:\n          const updateGitMessageLogAction = {\n            type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n            payload: \"There is a error with the branch command\"\n          };\n          this.props.dispatch(updateGitMessageLogAction);\n          break;\n      }\n    },\n    \"git commit\": async params => {\n      const updateGitMessageLogAction = {\n        type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\"\n      };\n      if (!this.props.userDetails.email || !this.props.userDetails.name) {\n        updateGitMessageLogAction.payload =\n          \"You need a name and email address to commit. This can be fake.\";\n        this.props.dispatch(updateGitMessageLogAction);\n        return;\n      }\n      const commitMessage = parseGit.parseCommit(params);\n      if (commitMessage === \"error\") {\n        updateGitMessageLogAction.payload = \"There is a error with the commit\";\n        this.props.dispatch(updateGitMessageLogAction);\n        return;\n      }\n\n      try {\n        const validity = parseGit.checkIfCommitParamsAreValid(\n          params,\n          this.props.appState.files\n        );\n\n        if (!validity.valid) {\n          updateGitMessageLogAction.payload = `There is a error with the commit. ${\n            validity.message\n          }`;\n          this.props.dispatch(updateGitMessageLogAction);\n          return;\n        }\n        if (params[0] === \".\" || params[0] === \"-m\") {\n          gitActions.gitCommitFilesAction(\n            this.props.appState.globals.homeDirectory,\n            this.props.appState.files,\n            this.props.userDetails,\n            commitMessage\n          )(this.props.dispatch);\n        } else {\n          if (validity.valid) {\n            gitActions.gitCommitFilesAction(\n              this.props.appState.globals.homeDirectory,\n              this.props.appState.files,\n              this.props.userDetails,\n              commitMessage\n            )(this.props.dispatch);\n          } else {\n            this.sendUnsupportedMessage();\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    \"git add\": async params => {\n      if (params[0] === \".\" && params.length === 1) {\n        console.log('in add .')\n        gitActions.gitAddFilesAction(\n          this.props.appState.globals.homeDirectory,\n          this.props.appState.files\n        )(this.props.dispatch);\n      } else {\n        //filter through files names\n        let valid = true;\n        for (let i = 0; i < params.length; i++) {\n          if (params[i].indexOf(\".\") === -1) {\n            valid = false;\n            break;\n          }\n        }\n        if (valid) {\n          gitActions.gitAddFilesAction(\n            this.props.appState.globals.homeDirectory,\n            params\n          )(this.props.dispatch);\n        } else {\n          this.sendUnsupportedMessage();\n        }\n      }\n    },\n    \"git checkout\": async params => {\n      const checkoutCommand = parseGit.filterCheckoutCommand(params);\n      if (checkoutCommand.command === \"error\") {\n        this.sendUnsupportedMessage();\n      } else if (checkoutCommand.command === \"create\") {\n        await gitActions.gitBranchCreate(\n          this.props.appState.globals.homeDirectory,\n          checkoutCommand.branchName\n        )(this.props.dispatch);\n        gitActions.gitCheckoutAction(\n          this.props.appState.globals.homeDirectory,\n          checkoutCommand.branchName\n        )(this.props.dispatch);\n      } else {\n        gitActions.gitCheckoutAction(\n          this.props.appState.globals.homeDirectory,\n          checkoutCommand.branchName\n        )(this.props.dispatch);\n      }\n    },\n    \"git push\": async params => {\n      gitActions.gitPushAction(\n        this.props.appState.globals.homeDirectory,\n        this.props.userDetails,\n        this.props.appState.gitCurrentBranch,\n        this.props.appState.globals.corsProxy,\n        this.props.appState.globals.githubUrl\n      )(this.props.dispatch);\n    },\n    default: error => {\n      this.sendUnsupportedMessage();\n    }\n  };\n\n  touchParser = async params => {\n    const fileName = params[0];\n    if (params.length > 1) {\n      this.sendUnsupportedMessage();\n    } else if (fileName.indexOf(\".\") === -1) {\n      const updateGitMessageLogAction = {\n        type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n        payload:\n          \"Not a valid file name. Please add a file extension. Ex: .txt).\"\n      };\n      this.props.dispatch(updateGitMessageLogAction);\n    } else {\n      gitActions.touchFileAction(\n        this.props.appState.globals.homeDirectory,\n        fileName\n      )(this.props.dispatch);\n    }\n  };\n\n  sendUnsupportedMessage = () => {\n    const updateGitMessageLogAction = {\n      type: \"UPDATE_WITH_ONE_GIT_RESPONSE_MESSAGE_LOG\",\n      payload: \"sorry, we dont understand/support that command yet\"\n    };\n    this.props.dispatch(updateGitMessageLogAction);\n  };\n\n  render() {\n    return (\n      <div className=\"section app-container\">\n        <div className=\"container files-container\">\n          {this.props.appState.files.length === 0\n            ? `~/User${this.props.appState.globals.homeDirectory}`\n            : \"Files:\"}\n          {this.props.appState.files.map((item, i) => (\n            <li className=\"file\" key={i}>\n              {this.props.appState.globals.homeDirectory}/{item}\n            </li>\n          ))}\n        </div>\n\n        <UserDetails handleUpdate={this.handleDetailsChange} />\n\n        <div className=\"container console-container\">\n          Git Some Help\n          <CommandLine execute={this.executeCommand} />\n          <div className=\"git-logs\">\n            {this.props.appState.gitResponseMesssages.map(item => (\n              <p className=\"message\" key={item.id}>\n                > {item.text}\n              </p>\n            ))}\n          </div>\n        </div>\n        <div className=\"help-container\" />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(store) {\n  return {\n    appState: store.appState,\n    userDetails: store.userDetails\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore  } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nimport rootReducer from './reducers'\nimport './index.css';\nimport \"bulma/css/bulma.css\";\nimport App from './App';\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst middleware = composeWithDevTools((applyMiddleware(thunkMiddleware)));\n\nconst store = createStore(rootReducer, undefined, middleware);\n\nReactDOM.render(\n<Provider store={store}> \n  <App />\n</Provider>, document.getElementById('root'));\n\nexport default store;"],"sourceRoot":""}